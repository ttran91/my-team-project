package com.springboot.backend.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.backend.dto.CustomerDTO;
import com.springboot.backend.dto.FoodDTO;
import com.springboot.backend.dto.VendorDTO;

import com.springboot.backend.model.Customer;
import com.springboot.backend.model.Food;
import com.springboot.backend.model.Order;
import com.springboot.backend.model.Vendor;
import com.springboot.backend.repository.CustomerRepository;
import com.springboot.backend.repository.OrderRepository;

@RestController
public class CustomerController {
	
	@Autowired
	CustomerRepository customerRepository;
	
	@PostMapping("/customer") //Function used to insert a new customer into the database
	public void postAccount(@RequestBody Customer customer) {
		customerRepository.save(customer);
	}

	@GetMapping("/customer")
	public List<VendorDTO> getAllCustomer(
			@RequestParam(name = "page",required = false, defaultValue = "0") Integer page, 
			@RequestParam(name = "size",required = false, defaultValue = "100000") Integer size ) {
		
		Pageable pageable=PageRequest.of(page, size);
		List<Customer>  list = customerRepository.findAll(pageable).getContent(); //20
		List<CustomerDTO> listVDto = new ArrayList<>();
		
		List<Order> listOrder = orderRepository.findAll();
		
		list.stream().forEach(c->{
			List<OrderDTO> listODto = new ArrayList<>(); 
			CustomerDTO cDto = new CustomerDTO(); 
			cDto.setId(c.getId());
			cDto.setName(c.getName());
			List<Order> filteredList = listOrder.stream()
						.filter(f-> f.getCustomer().getId().equals(c.getId()))
						.collect(Collectors.toList());
			oDto.setNumOfOrders(filteredList.size());
			filteredList.stream().forEach(f->{
				FoodDTO dto = new FoodDTO(); 
				dto.setId(f.getId());
				dto.setName(f.getName());
				dto.setFoodPrice(f.getFoodPrice());
				dto.setFoodCategory(f.getFoodCategory());
				dto.setVid(f.getVendor().getId());
				dto.setVname(f.getVendor().getName());
				dto.setVphoneNumber(f.getVendor().getPhoneNumber());
				dto.setVemail(f.getVendor().getEmail());
				listFDto.add(dto);
			});
			vDto.setFood(listFDto);
			listVDto.add(vDto);
		});
		return listVDto; 
	}

	@GetMapping("/customer/{cid}") //Function used to return  a specific customer based on their ID
	public Customer getAccountById(@PathVariable("cid") Long cid) {
		Optional<Customer> optional = customerRepository.findById(cid);
		if (optional.isPresent())
			return optional.get();
		throw new RuntimeException("ID is invalid");
	}

	@DeleteMapping("/customer/{cid}") //Function used to delete a customer based on customer ID
	public void deleteAccount(@PathVariable("cid") Long cid) {
		customerRepository.deleteById(cid);
	}

	@PutMapping("/customer/{cid}") //Function used to Adjust a customers Name, Username, and Password
	public Customer updateAccount(@PathVariable("cid") Long cid, @RequestBody Customer newCustomer) {
		Optional<Customer> optional = customerRepository.findById(cid);
		if (optional.isPresent()) {
			Customer existingCustomer = optional.get();
			existingCustomer.setCustomerName(newCustomer.getCustomerName());
			existingCustomer.setUserInfo(newCustomer.getUserInfo());
			
			return customerRepository.save(existingCustomer);
		}
		throw new RuntimeException("ID is Invalid");
	}
	
	@PutMapping("/customer/balance/{cid}") //Function to change A Customers Balance only
	public Customer adjustCustomerBalace(@PathVariable("cid") Long cid, @RequestBody Customer newCustomer) {
		Optional<Customer> optional = customerRepository.findById(cid);
		if (optional.isPresent()) {
			Customer existingCustomer = optional.get();
			existingCustomer.setCustomerBalance(newCustomer.getCustomerBalance());
			
			return customerRepository.save(existingCustomer);
		}
		throw new RuntimeException("ID is Invalid");
	}

}